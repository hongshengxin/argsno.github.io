<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>argsno</title>
    <link>https://argsno.github.io/</link>
    <description>Recent content on argsno</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 May 2019 01:05:27 +0800</lastBuildDate>
    
	<atom:link href="https://argsno.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 92 -- Reverse Linked List II</title>
      <link>https://argsno.github.io/post/leetcode-92/</link>
      <pubDate>Sun, 26 May 2019 01:05:27 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/leetcode-92/</guid>
      <description>难度：Medium 题目要求 1 2 3 4 5 6 7 8 Reverse a linked list from position m to n. Do it in one-pass. Note: 1 ≤ m ≤ n ≤ length of list. Example: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 Output: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL 中文说明 1 2 3 4 反转从位置 m 到</description>
    </item>
    
    <item>
      <title>LeetCode 206 -- Reverse Linked List</title>
      <link>https://argsno.github.io/post/leetcode-206/</link>
      <pubDate>Sun, 26 May 2019 01:02:55 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/leetcode-206/</guid>
      <description>难度：Easy 题目要求 1 2 3 4 5 6 7 8 9 Reverse a singly linked list. Example: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both? 中文说明 反转一个单链表。 题解 迭代法 通过维护三个指</description>
    </item>
    
    <item>
      <title>LeetCode 124 之 二叉树的最大路径和</title>
      <link>https://argsno.github.io/post/leetcode-124/</link>
      <pubDate>Wed, 22 May 2019 23:14:47 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/leetcode-124/</guid>
      <description>124. Binary Tree Maximum Path Sum 难度：Hard 题目链接：https://leetcode.com/problems/binary-tree-maximum-pa</description>
    </item>
    
    <item>
      <title>Guava Cache 之 Expire vs Refresh</title>
      <link>https://argsno.github.io/post/guava-cache-expire-vs-refresh/</link>
      <pubDate>Wed, 22 May 2019 16:08:51 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/guava-cache-expire-vs-refresh/</guid>
      <description>Cache LocalCache是Guava Cache本地缓存的实现类，可以看到LocalCache跟ConcurentHashMap有同样的继承关系</description>
    </item>
    
    <item>
      <title>算法精进之 k-d树</title>
      <link>https://argsno.github.io/post/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%BF%9B-k-d%E6%A0%91/</link>
      <pubDate>Sun, 19 May 2019 21:19:46 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%BF%9B-k-d%E6%A0%91/</guid>
      <description>概述 k-d树（k-dimensional树的简称），是一种分割k维数据空间的数据结构。主要应用于多维空间关键数据的搜索（如：范围搜索和最近邻</description>
    </item>
    
    <item>
      <title>ElasticSearch 入门</title>
      <link>https://argsno.github.io/post/elasticsearch-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 19 May 2019 14:26:25 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/elasticsearch-%E5%85%A5%E9%97%A8/</guid>
      <description>基本概念 Node与Cluster ElasticSearch作为分布式的搜索引擎，支持多台服务器协同工作，每台服务器上也可以同时运行多个实例。</description>
    </item>
    
    <item>
      <title>模拟直接内存溢出</title>
      <link>https://argsno.github.io/post/%E6%A8%A1%E6%8B%9F%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Sat, 11 May 2019 21:02:36 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/%E6%A8%A1%E6%8B%9F%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</guid>
      <description>最近在重新阅读一遍《深入理解 Java 虚拟机》，因为现在一直用着Java 8环境，就用Java 8跑一下书上的例子。不过，书上是基于Java 6/7，经过</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://argsno.github.io/post/future/</link>
      <pubDate>Tue, 07 May 2019 20:21:27 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/future/</guid>
      <description>Future 类 Java Future相关的代码基本都在java.util.concurrent的包里面，Future.java是一个接口，定义了最基本的一些任</description>
    </item>
    
    <item>
      <title>Spring MVC - Controller vs RestController</title>
      <link>https://argsno.github.io/post/spring-mvc-controller-vs-restcontroller/</link>
      <pubDate>Thu, 25 Apr 2019 15:22:14 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/spring-mvc-controller-vs-restcontroller/</guid>
      <description>Spring基于注解的MVC框架简化了RESTful Web服务的开发流程。传统的Spring MVC控制器和RESTful服务控制器的主要区别</description>
    </item>
    
    <item>
      <title>Spring MVC - 请求处理流程</title>
      <link>https://argsno.github.io/post/spring-mvc-request-process/</link>
      <pubDate>Wed, 24 Apr 2019 19:34:21 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/spring-mvc-request-process/</guid>
      <description>在Spring MVC框架中，用户发起请求，从“Request（请求）”开始，会依次进入“DispatcherServlet（核心分发器）” —</description>
    </item>
    
    <item>
      <title>Filter（过滤器）和Interceptor（拦截器）</title>
      <link>https://argsno.github.io/post/filterinterceptor/</link>
      <pubDate>Tue, 23 Apr 2019 15:41:00 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/filterinterceptor/</guid>
      <description>引言 过滤器（Filter）和拦截器（Interceptor）由于功能差不多，都可以用来对请求进行预处理和对响应结果进行处理，可能比较容易搞混</description>
    </item>
    
    <item>
      <title>树的遍历</title>
      <link>https://argsno.github.io/post/tree-traverse/</link>
      <pubDate>Tue, 23 Apr 2019 15:17:12 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/tree-traverse/</guid>
      <description>二叉树的遍历（特别是二查查找树）是数据结构与算法的基础知识，主要的遍历算法有四种，包括了先序遍历、中序遍历、后序遍历，还有层序遍历。不同的遍</description>
    </item>
    
    <item>
      <title>写日志的那些事儿</title>
      <link>https://argsno.github.io/post/%E5%86%99%E6%97%A5%E5%BF%97%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Mon, 04 Feb 2019 15:15:08 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/%E5%86%99%E6%97%A5%E5%BF%97%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid>
      <description>写日志简介 一般提到写日志，主要有下面几种不同的场景： 诊断日志：应用打印异常信息，排查问题用，一般是给人看的，输出格式会比较随意，里面可能会有</description>
    </item>
    
    <item>
      <title>大众点评搜索基于知识图谱的深度学习排序实践</title>
      <link>https://argsno.github.io/post/dianping-search-deeplearning/</link>
      <pubDate>Sat, 26 Jan 2019 23:03:32 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/dianping-search-deeplearning/</guid>
      <description>1. 引言 挑战与思路 搜索是大众点评App上用户进行信息查找的最大入口，是连接用户和信息的重要纽带。而用户搜索的方式和场景非常多样，并且由于对接业</description>
    </item>
    
    <item>
      <title>Elasticsearch面试题解读</title>
      <link>https://argsno.github.io/post/elasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Sat, 26 Jan 2019 22:25:10 +0800</pubDate>
      
      <guid>https://argsno.github.io/post/elasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E8%AF%BB/</guid>
      <description>题记 git上发现了网友总结的Elasticsearch BAT大厂面试题。只有题目，部分有答案，但不全。 正好抽出一些时间一起梳理一下。 既然是面</description>
    </item>
    
    <item>
      <title>Java GC</title>
      <link>https://argsno.github.io/post/java-gc/</link>
      <pubDate>Thu, 07 Dec 2017 14:53:43 +0000</pubDate>
      
      <guid>https://argsno.github.io/post/java-gc/</guid>
      <description>判断对象是否存活 引用计数法 给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值加1；当引用失效时，计数器值减1；任何时刻计数器为0的</description>
    </item>
    
    <item>
      <title>Java ClassLoader</title>
      <link>https://argsno.github.io/post/java-classloader/</link>
      <pubDate>Wed, 06 Dec 2017 11:29:51 +0000</pubDate>
      
      <guid>https://argsno.github.io/post/java-classloader/</guid>
      <description>类加载的时机 类的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resol</description>
    </item>
    
    <item>
      <title>Java 运行时数据区域</title>
      <link>https://argsno.github.io/post/java-runtime-data/</link>
      <pubDate>Tue, 05 Dec 2017 10:33:17 +0000</pubDate>
      
      <guid>https://argsno.github.io/post/java-runtime-data/</guid>
      <description>程序计数器 当前线程所执行的字节码的行号指示器，用于记录下一条要执行的指令。每个线程都需要有一个独立的程序计数器，线程私有。 如果线程正在执行的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://argsno.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://argsno.github.io/about/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
  </channel>
</rss>